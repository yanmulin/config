" Define Functions
fun! CharUnderCursor()
    return getline('.')[col('.')-1]
endf

set nocompatible
let $LANG = 'en'  "set message language
set langmenu=en   "set menu's language of gvim. no spaces beside '='

" 缩进制表符相关
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set autoindent
" set cindent
" "侦测文件类型"
filetype on
"载入文件类型插件"
filetype plugin on
"为特定文件类型载入相关缩进文件"
filetype indent on

set mouse=a
set encoding=utf-8
let &t_ut=''
set scrolloff=5
set tw=0
set foldmethod=indent
set foldlevel=99
set laststatus=2
set autochdir
set backspace=indent,eol,start
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

let mapleader=' '
syntax on
set relativenumber
set number
set wildmenu
set wrap
set showcmd

set hlsearch
set incsearch
set ignorecase
set smartcase

hi Search ctermbg=LightYellow
hi Search ctermfg=Red

noremap <LEADER><CR> :nohlsearch<CR>

noremap J 6j
noremap K 6k
noremap n nzz
noremap N Nzz

" INSERT MODE: 自动匹配括号
" inoremap ( ()<LEFT>
" inoremap { {<CR>}<LEFT><UP><C-o>$
" inoremap [ []<LEFT>
" inoremap <expr> ) CharUnderCursor() == ')' ? '<RIGHT>' : ')'
" inoremap <expr> } CharUnderCursor() == '}' ? '<RIGHT>' : '}'
" inoremap <expr> ] CharUnderCursor() == ']' ? '<RIGHT>' : ']'

" INSERT MODE: 快速移动光标
" 行首
inoremap <C-a> <C-o>^ 
" 行尾
inoremap <C-e> <C-o>$ 
" 删除光标前
inoremap <C-u> <SPACE><C-o>d^

" 多窗口 
nnoremap <C-\> :set splitright<CR>:vsplit<CR>
nnoremap s <nop>
nnoremap sl :set nosplitright<CR>:vsplit<CR>
nnoremap sh :set splitright<CR>:vsplit<CR>
nnoremap sj :set splitbelow<CR>:split<CR>
nnoremap sk :set nosplitbelow<CR>:split<CR>
nnoremap <LEADER>j <C-w>j
nnoremap <LEADER>k <C-w>k
nnoremap <LEADER>h <C-w>h
nnoremap <LEADER>l <C-w>l

" 窗口大小设置
nnoremap <LEADER><up> :res +5<CR>
nnoremap <LEADER><down> :res -5<CR>
nnoremap <LEADER><left> :vertical resize +5<CR>
nnoremap <LEADER><right> :vertical resize -5<CR>

" 标签页
nnoremap <C-o> :tabe<CR>:e 
nnoremap tt :tabe<CR>
nnoremap th :tabprev<CR>
nnoremap tl :tabnext<CR>

" 占位符<++>：'<,'>normal ...
nnoremap <LEADER><LEADER> <Esc>:/<++><CR>:nohlsearch<CR>c4l

" 剪切板
noremap Y y$
map <LEADER>y "+y 

" 光标后退/前进
nnoremap - <C-o>
nnoremap = <C-i>

" Plugin ...
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
source ~/.vim/autoload/plug.vim

call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround' 
Plug 'preservim/nerdtree'
Plug 'preservim/nerdcommenter'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/vim-peekaboo'
call plug#end()

" NerdTree config
noremap <C-n> :NERDTree<CR>
" Autostart NERDTree if no file is open or a directory was open
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" EasyMotion config
nmap <LEADER>/ <Plug>(easymotion-s2)

" auto-pairs
let g:AutoPairsShortcutFastWrap = '<C-p>'
